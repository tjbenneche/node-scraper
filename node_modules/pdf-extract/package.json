{
  "name": "pdf-extract",
  "engines": "node",
  "version": "1.0.4",
  "private": false,
  "scripts": {
    "test": "node_modules/.bin/mocha --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nisaacson/pdf-extract.git"
  },
  "main": "main.js",
  "folders": "lib",
  "dependencies": {
    "eyespect": "~0.1.8",
    "async": "~0.1.22",
    "temp": "~0.4.0",
    "walk": "~2.2.1",
    "rimraf": "~2.0.2",
    "pathhash": "~1.0.0"
  },
  "devDependencies": {
    "should": "~1.2.1",
    "mocha": "~1.8.1"
  },
  "readme": "# Node PDF\nNode PDF is a set of tools that takes in PDF files and converts them to usable formats for data processing. The library supports both extracting text from searchable pdf files as well as performing OCR on pdfs which are just scanned images of text\n\n[![Build Status](https://travis-ci.org/nisaacson/pdf-extract.png)](https://travis-ci.org/nisaacson/pdf-extract)\n\n## Installation\n=======\nTo begin install the module.\n`npm install pdf-extract`\nAfter the library is installed you will need the following binaries accessible on your path to process pdfs.\n\n- pdftk\n    - pdftk splits multi-page pdf into single pages.\n- pdftotext\n    - pdftotext is used to extract text out of searchable pdf documents\n- ghostscript\n    - ghostscript is an ocr preprocessor which convert pdfs to tif files for input into tesseract\n- tesseract\n    - tesseract performs the actual ocr on your scanned images\n\n\n### OSX\nTo begin on OSX, first make sure you have the homebrew package manager installed.\n\n**pdftk** is not available in Homebrew. However a gui install is available here.\n[http://www.pdflabs.com/docs/install-pdftk/](http://www.pdflabs.com/docs/install-pdftk/)\n\n**pdftotext** is included as part on the xpdf utilities library. **xpdf** can be installed via homebrew\n``` bash\nbrew install xpdf\n```\n\n**ghostscript** can be install via homebrew\n``` bash\nbrew install gs\n```\n\n**tesseract** can be installed via homebrew as well\n`brew install tesseract`\n\nAfter tesseract is installed you need to install the alphanumeric config and an updated trained data file\n``` bash\ncd <root of this module>\ncp \"./share/eng.traineddata\" \"/usr/local/Cellar/tesseract/3.01/share/tessdata/eng.traineddata\"\ncp \"./share/configs/alphanumeric\" \"/usr/local/Cellar/tesseract/3.01/share/tessdata/configs/alphanumeric\"\n```\n\n\n### Ubuntu\n**pdftk** can be installed directly via apt-get\n```bash\napt-get install pdftk\n```\n\n**pdftotext** is included in the **poppler-utils** library. To installer poppler-utils execute\n``` bash\napt-get install poppler-utils\n```\n\n**ghostscript** can be install via apt-get\n``` bash\napt-get install ghostscript\n```\n\n**tesseract** can be installed via apt-get. Note that unlike the osx install the package is called **tesseract-ocr** on Ubuntu, not **tesseract**\n``` bash\napt-get install tesseract-ocr\n```\n\nFor the OCR to work, you need to have the tesseract-ocr binaries available on your path. If you only need to handle ASCII characters, the accuracy of the OCR process can be increased by limiting the tesseract output. To do this copy the *alphanumeric* file included with this pdf-extract module into the *tess-data* folder on your system. Also the eng.traineddata included with the standard tesseract-ocr package is out of date. This pdf-extract module provides an up-to-date version which you should copy into the appropriate location on your system\n``` bash\ncd <root of this module>\ncp \"./share/eng.traineddata\" \"/usr/share/tesseract-ocr/tessdata/eng.traineddata\"\ncp \"./share/alphanumeric\" \"/usr/share/tesseract-ocr/tessdata/configs/alphanumeric\"\n```\n\n\n### SmartOS\n**pdftk** can be installed directly via apt-get\n```bash\napt-get install pdftk\n```\n\n**pdftotext** is included in the **poppler-utils** library. To installer poppler-utils execute\n``` bash\napt-get install poppler-utils\n```\n\n**ghostscript** can be install via pkgin. Note you may need to update the pkgin repo to include the additional sources provided by Joyent. Check [http://www.perkin.org.uk/posts/9000-packages-for-smartos-and-illumos.html](http://www.perkin.org.uk/posts/9000-packages-for-smartos-and-illumos.html) for details\n``` bash\npkgin install ghostscript\n```\n\n**tesseract** can be must be manually downloaded and compiled. You must also install leptonica before installing tesseract. At the time of this writing leptonica is available from [http://www.leptonica.com/download.html](http://www.leptonica.com/download.html), with the latest version tarball available from [http://www.leptonica.com/source/leptonica-1.69.tar.gz](http://www.leptonica.com/source/leptonica-1.69.tar.gz)\n``` bash\npkgin install autoconf\nwget http://www.leptonica.com/source/leptonica-1.69.tar.gz\ntar -xvzf leptonica-1.69.tar.gz\ncd leptonica-1.69\n./configure\nmake\n[sudo] make install\n```\nAfter installing leptonic move on to tesseract. Tesseract is available from [https://code.google.com/p/tesseract-ocr/downloads/list](https://code.google.com/p/tesseract-ocr/downloads/list) with the latest version available from [https://code.google.com/p/tesseract-ocr/downloads/detail?name=tesseract-ocr-3.02.02.tar.gz&can=2&q=](https://code.google.com/p/tesseract-ocr/downloads/detail?name=tesseract-ocr-3.02.02.tar.gz&can=2&q=)\n``` bash\nwget https://code.google.com/p/tesseract-ocr/downloads/detail?name=tesseract-ocr-3.02.02.tar.gz&can=2&q=\ntar -xvzf tesseract-ocr-3.02.02.tar.gz\ncd tesseract-ocr\n./configure\nmake\n[sudo] make install\n```\n\n### Windows\nNot yet tested. If you figure out how to use pdf-extract on windows send me a pull request and I will update the readme accordingly\n\n## Usage\n=======\n\n### OCR Extract from scanned image\nExtract from a pdf file which contains a scanned image and no searchable text\n``` javascript\nvar inspect = require('eyes').inspector({maxLength:20000});\nvar pdf_extract = require('pdf-extract');\nvar absolute_path_to_pdf = '~/Downloads/sample.pdf'\nvar options = {\n  type: 'ocr' // perform ocr to get the text within the scanned image\n}\n\nvar processor = pdf_extract(absolute_path_to_pdf, options, function(err) {\n  if (err) {\n    return callback(err);\n  }\n});\nprocessor.on('complete', function(data) {\n  inspect(data.text_pages, 'extracted text pages');\n  callback(null, text_pages);\n});\nprocessor.on('error', function(err) {\n  inspect(err, 'error while extracting pages');\n  return callback(err);\n});\n```\n\n\n\n### Text extract from searchable pdf\nExtract from a pdf file which contains actual searchable text\n``` javascript\nvar inspect = require('eyes').inspector({maxLength:20000});\nvar pdf_extract = require('pdf-extract');\nvar absolute_path_to_pdf = '~/Downloads/electronic.pdf'\nvar options = {\n  type: 'text'  // extract the actual text in the pdf file\n}\nvar processor = pdf_extract(absolute_path_to_pdf, options, function(err) {\n  if (err) {\n    return callback(err);\n  }\n});\nprocessor.on('complete', function(data) {\n  inspect(data.text_pages, 'extracted text pages');\n  callback(null, text_pages);\n});\nprocessor.on('error', function(err) {\n  inspect(err, 'error while extracting pages');\n  return callback(err);\n});\n\n```\n#### Options\nAt a minimum you must specific the type of pdf extract you wish to perform\n\n**clean**\nWhen the system performs extracts text from a multi-page pdf, it first splits the pdf into single pages. This are written to disk before the ocr occurs. For some applications these single page files can be useful. If you need to work with the single page pdf files after the ocr is complete, set the **clean** option to **false** as show below. Note that the single page pdf files are written to the system appropriate temp directory, so if you must copy the files to a more permanent location yourself after the ocr process completes\n``` javascript\nvar options = {\n  type: 'ocr' // (required), perform ocr to get the text within the scanned image\n  clean: false // keep the single page pdfs created during the ocr process\n  ocr_flags: [\n    '-psm 1',       // automatically detect page orientation\n    '-l dia',       // use a custom language file\n    'alphanumeric'  // only output ascii characters\n  ]\n}\n```\n\n\n### Events\nWhen processing, the module will emit various events as they occurr\n\n**page**\nEmitted when a page has completed processing. The data passed with this event looks like\n``` javascript\nvar data = {\n  hash: <sha1 hash of the input pdf file here>\n  text: <extracted text here>,\n  index: 2,\n  num_pages: 4,\n  pdf_path: \"~/Downloads/input_pdf_file.pdf\",\n  single_page_pdf_path: \"/tmp/temp_pdf_file2.pdf\"\n}\n```\n\n**error**\nEmitted when an error occurs during processing. After this event is emitted processing will stop.\nThe data passed with this event looks like\n```\nvar data = {\n  error: 'no file exists at the path you specified',\n  pdf_path: \"~/Downloads/input_pdf_file.pdf\",\n}\n```\n\n**complete**\nEmitted when all pages have completed processing and the pdf extraction is complete\n```\nvar data = {\n  hash: <sha1 hash of the input pdf file here>\n  text_pages: <Array of Strings, one per page>,\n  pdf_path: \"~/Downloads/input_pdf_file.pdf\",\n  single_page_pdf_file_paths: [\n    \"/tmp/temp_pdf_file1.pdf\",\n    \"/tmp/temp_pdf_file2.pdf\",\n    \"/tmp/temp_pdf_file3.pdf\",\n    \"/tmp/temp_pdf_file4.pdf\",\n  ]\n}\n```\n\n**log**\nTo avoid spamming process.stdout, log events are emitted instead.\n\n## Tests\n=======\nTo test that your system satisfies the needed dependencies and that module is functioning correctly execute the command in the pdf-extract module folder\n```\ncd <project_root>/node_modules/pdf-extract\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "description": "Node PDF is a set of tools that takes in PDF files and converts them to usable formats for data processing. The library supports both extracting text from searchable pdf files as well as performing OCR on pdfs which are just scanned images of text",
  "bugs": {
    "url": "https://github.com/nisaacson/pdf-extract/issues"
  },
  "homepage": "https://github.com/nisaacson/pdf-extract",
  "_id": "pdf-extract@1.0.4",
  "dist": {
    "shasum": "586c6c18349b62132b8a4d33de6c6b8e17e29db4"
  },
  "_from": "pdf-extract@",
  "_resolved": "https://registry.npmjs.org/pdf-extract/-/pdf-extract-1.0.4.tgz"
}
